package mobile.nganchang.chang.technician

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.android.material.button.MaterialButton
import com.google.android.material.card.MaterialCardView
import mobile.nganchang.chang.R

class TechnicianBookingsFragment : Fragment() {

    private lateinit var db: FirebaseFirestore
    private lateinit var auth: FirebaseAuth
    private lateinit var bookingsContainer: LinearLayout

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val view = inflater.inflate(R.layout.fragment_technician_bookings, container, false)

        auth = FirebaseAuth.getInstance()
        db = FirebaseFirestore.getInstance()
        bookingsContainer = view.findViewById(R.id.bookings_container)

        loadBookings()
        return view
    }

    private fun loadBookings() {
        val userId = auth.currentUser?.uid
        if (userId != null) {
            db.collection("bookings")
                .whereEqualTo("technician_id", userId)
                .get()
                .addOnSuccessListener { documents ->
                    bookingsContainer.removeAllViews()

                    if (documents.isEmpty) {
                        val noBookingsTextView = TextView(requireContext()).apply {
                            text = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                            textSize = 18f
                            setPadding(16, 16, 16, 16)
                            setTextColor(resources.getColor(android.R.color.darker_gray, null))
                        }
                        bookingsContainer.addView(noBookingsTextView)
                        return@addOnSuccessListener
                    }

                    for (document in documents) {
                        val customerName = document.getString("customer_name") ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                        val workType = document.getString("work_type") ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
                        val status = document.getString("status") ?: "pending"
                        val bookingId = document.id

                        // Inflate `item_booking.xml`
                        val bookingView = layoutInflater.inflate(R.layout.item_booking, bookingsContainer, false)

                        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        bookingView.findViewById<TextView>(R.id.tv_customer_name).text = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: $customerName"
                        bookingView.findViewById<TextView>(R.id.tv_service_type).text = "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: $workType"
                        bookingView.findViewById<TextView>(R.id.tv_status).text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getStatusText(status)}"

                        val btnCancel = bookingView.findViewById<MaterialButton>(R.id.btn_cancel)
                        val btnPaid = bookingView.findViewById<MaterialButton>(R.id.btn_paid)

                        // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                        when (status) {
                            "pending" -> {
                                btnCancel.visibility = View.VISIBLE
                                btnPaid.visibility = View.GONE
                                btnCancel.setOnClickListener {
                                    updateBookingStatus(bookingId, "canceled")
                                }
                            }
                            "confirmed" -> {
                                btnCancel.visibility = View.VISIBLE
                                btnPaid.visibility = View.VISIBLE
                                btnCancel.setOnClickListener {
                                    updateBookingStatus(bookingId, "canceled")
                                }
                                btnPaid.setOnClickListener {
                                    updateBookingStatus(bookingId, "completed")
                                }
                            }
                            "completed" -> {
                                btnCancel.visibility = View.GONE
                                btnPaid.visibility = View.GONE
                            }
                        }

                        // ‡πÄ‡∏û‡∏¥‡πà‡∏° View ‡∏•‡∏á‡πÉ‡∏ô container
                        bookingsContainer.addView(bookingView)
                    }
                }
                .addOnFailureListener {
                    Toast.makeText(requireContext(), "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", Toast.LENGTH_SHORT).show()
                }
        }
    }

    private fun updateBookingStatus(bookingId: String, action: String) {
        db.collection("bookings").document(bookingId)
            .update("status", action)
            .addOnSuccessListener {
                Toast.makeText(requireContext(), "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô $action ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", Toast.LENGTH_SHORT).show()
                loadBookings()
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", Toast.LENGTH_SHORT).show()
            }
    }

    private fun getStatusText(status: String): String {
        return when (status) {
            "pending" -> "‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
            "confirmed" -> "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            "completed" -> "üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
            "canceled" -> "‚ùå ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            else -> status
        }
    }
}
