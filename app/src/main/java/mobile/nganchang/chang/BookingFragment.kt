package mobile.nganchang.chang.customer

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.android.material.button.MaterialButton
import mobile.nganchang.chang.R

class BookingFragment : Fragment() {
    private lateinit var db: FirebaseFirestore
    private lateinit var bookingsContainer: LinearLayout

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val view = inflater.inflate(R.layout.fragment_booking, container, false)
        db = FirebaseFirestore.getInstance()
        bookingsContainer = view.findViewById(R.id.bookings_container)

        loadBookings()
        return view
    }

    private fun loadBookings() {
        val userId = FirebaseAuth.getInstance().currentUser?.uid ?: return

        db.collection("bookings").whereEqualTo("customer_id", userId)
            .get()
            .addOnSuccessListener { result ->
                bookingsContainer.removeAllViews()

                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if (result.isEmpty) {
                    val noBookingsTextView = TextView(requireContext()).apply {
                        text = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                        textSize = 18f
                        setPadding(16, 16, 16, 16)
                        setTextColor(resources.getColor(android.R.color.darker_gray, null))
                    }
                    bookingsContainer.addView(noBookingsTextView)
                    return@addOnSuccessListener
                }

                // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏•‡∏á‡πÉ‡∏ô Layout
                for (document in result) {
                    val technicianName = document.getString("technician_name") ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                    val workType = document.getString("work_type") ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
                    val status = document.getString("status") ?: "pending"
                    val price = document.getLong("price") ?: 0L
                    val bookingId = document.id

                    // ‡πÉ‡∏ä‡πâ item_bookingc.xml ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á CardView ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
                    val bookingView = layoutInflater.inflate(R.layout.item_bookingc, bookingsContainer, false)

                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firestore ‡πÉ‡∏´‡πâ View
                    bookingView.findViewById<TextView>(R.id.technician_name).text = "‡∏ä‡πà‡∏≤‡∏á: $technicianName"
                    bookingView.findViewById<TextView>(R.id.work_type).text = "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: $workType"
                    bookingView.findViewById<TextView>(R.id.price).text = "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø$price"
                    bookingView.findViewById<TextView>(R.id.status).text = getStatusText(status)

                    val cancelButton = bookingView.findViewById<MaterialButton>(R.id.cancel_button)
                    if (status == "pending") {
                        cancelButton.visibility = View.VISIBLE
                        cancelButton.setOnClickListener { cancelBooking(bookingId) }
                    } else {
                        cancelButton.visibility = View.GONE
                    }

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° View ‡∏•‡∏á‡πÉ‡∏ô bookingsContainer
                    bookingsContainer.addView(bookingView)
                }
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", Toast.LENGTH_SHORT).show()
            }
    }

    private fun cancelBooking(bookingId: String) {
        db.collection("bookings").document(bookingId)
            .delete()
            .addOnSuccessListener {
                Toast.makeText(requireContext(), "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", Toast.LENGTH_SHORT).show()
                loadBookings()
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ", Toast.LENGTH_SHORT).show()
            }
    }

    private fun getStatusText(status: String): String {
        return when (status) {
            "pending" -> "‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
            "confirmed" -> "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            "completed" -> "üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
            "canceled" -> "‚ùå ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            else -> status
        }
    }
}
