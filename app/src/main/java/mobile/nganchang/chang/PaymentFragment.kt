package mobile.nganchang.chang.customer

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.fragment.app.Fragment
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import mobile.nganchang.chang.R
import com.google.android.material.button.MaterialButton

class PaymentFragment : Fragment() {

    private lateinit var db: FirebaseFirestore
    private lateinit var paymentListContainer: LinearLayout

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val view = inflater.inflate(R.layout.fragment_payment, container, false)

        db = FirebaseFirestore.getInstance()
        paymentListContainer = view.findViewById(R.id.payment_list_container)

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        loadPaymentDetails()

        return view
    }

    private fun loadPaymentDetails() {
        val currentUser = FirebaseAuth.getInstance().currentUser ?: return

        db.collection("bookings")
            .whereEqualTo("customer_id", currentUser.uid)
            .get()
            .addOnSuccessListener { result ->
                paymentListContainer.removeAllViews()

                if (result.isEmpty) {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"
                    val noDataMessage = TextView(requireContext())
                    noDataMessage.text = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"
                    noDataMessage.textSize = 18f
                    noDataMessage.setTextColor(resources.getColor(android.R.color.darker_gray))
                    paymentListContainer.addView(noDataMessage)
                    return@addOnSuccessListener
                }

                for (document in result) {
                    val technicianName = document.getString("technician_name") ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                    val workType = document.getString("work_type") ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                    val status = document.getString("status") ?: "pending"
                    val price = document.getLong("price") ?: 0L
                    val bookingId = document.id

                    // Inflate payment_item.xml (‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á)
                    val paymentView = layoutInflater.inflate(R.layout.payment_item, paymentListContainer, false)

                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô UI
                    paymentView.findViewById<TextView>(R.id.technician_name).text = "‡∏ä‡πà‡∏≤‡∏á: $technicianName"
                    paymentView.findViewById<TextView>(R.id.work_type).text = "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: $workType"
                    paymentView.findViewById<TextView>(R.id.price).text = "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø$price"
                    paymentView.findViewById<TextView>(R.id.status).text = getStatusText(status)

                    val payButton = paymentView.findViewById<MaterialButton>(R.id.pay_button)
                    if (status == "pending") {
                        payButton.visibility = View.VISIBLE
                        payButton.setOnClickListener { initiatePayment(bookingId) }
                    } else {
                        payButton.visibility = View.GONE
                    }

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° View ‡∏•‡∏á‡πÉ‡∏ô Container
                    paymentListContainer.addView(paymentView)
                }
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", Toast.LENGTH_SHORT).show()
            }
    }

    private fun initiatePayment(bookingId: String) {
        db.collection("bookings").document(bookingId)
            .update("status", "paid")
            .addOnSuccessListener {
                Toast.makeText(requireContext(), "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", Toast.LENGTH_SHORT).show()
                loadPaymentDetails()
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", Toast.LENGTH_SHORT).show()
            }
    }

    private fun getStatusText(status: String): String {
        return when (status) {
            "pending" -> "‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
            "confirmed" -> "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            "paid" -> "üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            "completed" -> "üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
            "canceled" -> "‚ùå ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            else -> status
        }
    }
}
