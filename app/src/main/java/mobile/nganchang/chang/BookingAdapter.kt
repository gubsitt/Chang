package mobile.nganchang.chang.technician

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import mobile.nganchang.chang.R

class BookingAdapter(
    private val bookings: List<Map<String, Any>>,
    private val onStatusChange: (Map<String, Any>, String) -> Unit
) : RecyclerView.Adapter<BookingAdapter.BookingViewHolder>() {

    class BookingViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val tvCustomerName: TextView = view.findViewById(R.id.tv_customer_name)
        val tvWorkType: TextView = view.findViewById(R.id.tv_service_type)
        val tvStatus: TextView = view.findViewById(R.id.tv_status)
        val btnCancel: Button = view.findViewById(R.id.btn_cancel)
        val btnPaid: Button = view.findViewById(R.id.btn_paid)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BookingViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_booking, parent, false)
        return BookingViewHolder(view)
    }

    override fun onBindViewHolder(holder: BookingViewHolder, position: Int) {
        val booking = bookings[position]

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        holder.tvCustomerName.text = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${booking["customer_id"]}"
        holder.tvWorkType.text = "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${booking["work_type"]}"

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        holder.tvStatus.text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${convertStatus(booking["status"] as String)}"

        val status = booking["status"] as String

        // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        when (status) {
            "pending" -> {
                holder.btnCancel.visibility = View.VISIBLE
                holder.btnPaid.visibility = View.VISIBLE
            }
            "paid" -> {
                holder.btnCancel.visibility = View.GONE
                holder.btnPaid.visibility = View.GONE
            }
            "canceled" -> {
                holder.btnCancel.visibility = View.GONE
                holder.btnPaid.visibility = View.GONE
            }
        }

        // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
        holder.btnCancel.setOnClickListener { onStatusChange(booking, "canceled") }
        holder.btnPaid.setOnClickListener { onStatusChange(booking, "paid") }
    }

    override fun getItemCount(): Int = bookings.size

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
    private fun convertStatus(status: String): String {
        return when (status) {
            "pending" -> "‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
            "paid" -> "üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            "canceled" -> "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"
            else -> "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
        }
    }
}
